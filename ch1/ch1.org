#+TITLE: Structure and Interpretation of Computer Programs (SICP)
#+AUTHOR: Robert Irelan
#+EMAIL: rirelan@gmail.com
#+OPTIONS: author:t email:t f:t num:nil H:4
#+PROPERTY: header-args :comments link :noweb no-export
#+PROPERTY: header-args:scheme :shebang #!/usr/bin/env chicken-scheme
#+FILETAGS: :SICP:

* TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-9.html#%_chap_1][Chapter 1]]

** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1][1.1: Building Abstractions with Procedures]]

*** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1.1][1.1.1: Expressions]]

No exercises.

*** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1.2][1.1.2: Naming and the Environment]]

No exercises.

*** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1.3][1.1.3: Evaluating Combinations]]

No exercises.

*** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1.4][1.1.4: Compound Procedures]]

No exercises.

*** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1.5][1.1.5: The Substitution Model for Procedure Application]]

No exercises.

*** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1.6][1.1.6: Conditional Expressions and Predicates]]
**** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_thm_1.1][Exercise 1.1]]

This exercise serves purely to familiarize the student with entering statements
in the REPL. Verify the expected REPL output using tests.

#+BEGIN_SRC scheme :tangle ex-1-1-test.scm
  (use test)

  (test 10 10)

  (test 12
        (+ 5 3 4))

  (test 8
        (- 9 1))

  (test 3
        (/ 6 2))

  (test 6
        (+ (* 2 4) (- 4 6)))

  (define a 3)
  (define b (+ a 1))

  (test 19
        (+ a b (* a b)))

  (test #f
        (= a b))

  (test 4
        (if (and (> b a) (< b (* a b)))
            b
            a))

  (test 16
        (cond ((= a 4) 6)
              ((= b 4) (+ 6 7 a))
              (else 25)))

  (test 6
        (+ 2 (if (> b a) b a)))

  (test 16
        (* (cond ((> a b) a)
                 ((< a b) b)
                 (else -1))
           (+ a 1)))

#+END_SRC

**** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_thm_1.2][Exercise 1.2]]

The book's expression translated to prefix notation is

#+BEGIN_SRC scheme
  (/ (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5)))))
     (* 3 (- 6 2) (- 2 7)))
#+END_SRC

**** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_thm_1.3][Exercise 1.3]]

#+BEGIN_SRC scheme :tangle ex-1-3.scm
  (define (square x)
    (* x x))
  (define (sum-of-squares x y)
    (+ (square x) (square y)))

  ;;; Return sum of squares of two largest out of three arguments
  (define (f a b c)
    (cond
      ((and (< a b) (< a c)) (sum-of-squares b c))
      ((and (< b a) (< b c)) (sum-of-squares a c))
      (else (sum-of-squares a b))))
#+END_SRC

#+BEGIN_SRC scheme :tangle ex-1-3-test.scm
  (include "ex-1-3")
  (use test)

  (test 13 (f 1 2 3))
  (test 13 (f 2 1 3))
  (test 13 (f 3 2 1))
  (test 18 (f 3 3 2))
  (test 13 (f 3 2 2))
  (test 8 (f 2 2 2))
#+END_SRC

**** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_thm_1.4][Exercise 1.4]]

In the procedure

#+BEGIN_SRC scheme
  (define (a-plus-abs-b a b)
    ((if (> b 0) + -) a b))
#+END_SRC

evaluation does not take place when the procedure is defined, but rather
only after it is called. When it is called, evaluation proceeds from left to
right and from inside out. Thus, the forms are evaluated in the following
order:

- ~(> b 0)~
- ~(if ... + -)~
- ~((if ...) a b)~

Note that ~+~ and ~-~ are references to functions, which can in general be
returned from a function.

**** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_thm_1.5][Exercise 1.5]]

The expression under consideration is the following:

#+BEGIN_SRC scheme
  (define (p) (p))

  (define (test x y)
    (if (= x 0)
        0
        y))

  (test 0 (p))
#+END_SRC


With applicative order, a procedure is called after evaluating all its
arguments. Therefore, the last expression in the above is evaluated as follows:

- ~0 => 0~
- ~(p) => ; Calls itself recursively forever~

In normal form, all expressions are fully expanded and then reduced to
obtain a value:

- ~(test 0 (p))~
- ~(if (= 0 0) 0 (p))~
- ~0~

Because the procedure ~p~ cannot be validly evaluated by substitution (due
to infinite recursion), normal- and applicative-order evaluation give
different results here.

*** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1.7][1.1.7: Example: Square Roots by Newton's Method]]
**** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_thm_1.6][Exercise 1.6]]

When calling ~new-if~, its arguments are always evaluated. Thus, even if the
else-branch, which calls ~sqrt-iter~, should not be taken, it is nevertheless
evaluated due to strict evaluation, so calling ~sqrt-iter~ results in infinite
recursion.

**** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_thm_1.7][Exercise 1.7]]

Here is the ~good-enough?~ function defined in the text:

#+BEGIN_SRC scheme
  (define (good-enough? guess x)
    (< (abs (- (square guess) x)) 0.001))
#+END_SRC

Notably, the threshold is an absolute value, no matter the size of the
guess. For small guesses, this will terminate even if 0.001 is of a
non-negligible magnitude compared to the guess. For large guesses, if the guess
doesn't have a precision of at least 0.001 at a certain magnitude, the test may
not ever terminate because there may be no value of ~(square guess)~ that lies
within 0.001 of x, due to limited precision.

It is almost always better to define a threshold that is a multiple of the
order of magnitude of x:

#+BEGIN_SRC scheme
  (define (good-enough? guess x)
    (< (abs (/ (- (square guess) x)
               (square guess)))
       0.001))
#+END_SRC

**** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_thm_1.8][Exercise 1.8]]

Implement a cube root approximation formula based on Newton's method:

#+BEGIN_SRC scheme :tangle ex-1-8.scm
  (define (square x)
    (* x x))
  (define (cube x)
    (* x x x))

  (define (improve guess x)
    (/ (+ (/ x (square guess))
          (* 2 guess))
       3))
  (define (good-enough? guess x)
    (< (abs (/ (- (cube guess) x)
               (cube guess)))
       0.001))

  (define (cbrt-iter guess x)
    (if (good-enough? guess x)
        guess
        (cbrt-iter (improve guess x)
                   x)))
  (define (cbrt x)
    (cbrt-iter 1.0 x))
#+END_SRC

#+BEGIN_SRC scheme :tangle ex-1-8-test.scm
  (include "ex-1-8")
  (use test)

  (parameterize ((current-test-epsilon 0.01))
    (test 3.00 (cbrt 27))
    (test 6.52 (cbrt 278)))
#+END_SRC

*** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1.8][1.1.8: Procedures as Black-Box Abstractions]]

No exercises.

** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2][1.2: Procedures and the Processes They Generate]]

*** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2.1][1.2.1: Linear Recursion and Iteration]]
**** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.9][Exercise 1.9]]

Evaluate the following procedures using the substitution model:

- ~new+-rec~

  #+CAPTION: ex-1-9-rec
  #+NAME: ex-1-9-rec
  #+BEGIN_SRC scheme
    (define (new+-rec a b)
      (if (= a 0)
        b
        (inc (new+-rec (dec a) b))))
  #+END_SRC

  This procedure is fundamentally recursive because it defers the evaluation of
  ~inc~ until ~new+-rec~ has reached its base case, resulting in a stack of
  deferred operations:

  #+CAPTION: ex-1-9-rec-test
  #+NAME: ex-1-9-rec-test
  #+BEGIN_SRC scheme
    (test-chain "ex-1-9-rec"
                '((new+-rec 4 5)
                  (inc (new+-rec 3 5))
                  (inc (inc (new+-rec 2 5)))
                  (inc (inc (inc (new+-rec 1 5))))
                  (inc (inc (inc (inc (new+-rec 0 5)))))
                  (inc (inc (inc (inc 5))))
                  (inc (inc (inc 6)))
                  (inc (inc 7))
                  (inc 8)
                  9))
  #+END_SRC

- ~new+-iter~

  #+CAPTION: ex-1-9-iter
  #+NAME: ex-1-9-iter
  #+BEGIN_SRC scheme
    (define (new+-iter a b)
      (if (= a 0)
          b
          (new+-iter (dec a) (inc b))))
  #+END_SRC

  This procedure is fundamentally iterative because ~new+-iter~ is in a
  tail-call position. Because of this, each call to ~new+-iter~ can be replaced
  with its result:

  #+CAPTION: ex-1-9-iter-test
  #+NAME: ex-1-9-iter-test
  #+BEGIN_SRC scheme
    (test-chain "ex-1-9-iter"
                '((new+-iter 4 5)
                  (new+-iter 3 6)
                  (new+-iter 2 7)
                  (new+-iter 1 8)
                  (new+-iter 0 9)
                  9))
  #+END_SRC

***** Auxiliary procedures

#+BEGIN_SRC scheme :tangle ex-1-9.scm
  (define (inc x) (+ x 1))
  (define (dec x) (- x 1))

  <<ex-1-9-rec>>
  <<ex-1-9-iter>>
#+END_SRC

#+BEGIN_SRC scheme :tangle ex-1-9-test.scm
  (include "ex-1-9")
  (use test)
  (use srfi-1)

  ;;; TEST-CHAIN -- assert that all expressions in a list evaluate to the same
  ;;; result.
  (define (test-chain name exprs)
    (eval (append `(test-group ,name)
                  (unfold (lambda (p) (null? (cdr p)))
                          (lambda (p) `(test-assert (= ,(car p) ,(cadr p))))
                          cdr
                          exprs))))

  (test-group "ex-1-9-test"
              <<ex-1-9-rec-test>>
              <<ex-1-9-iter-test>>
              )

#+END_SRC

**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.10][Exercise 1.10]]
*** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2.2][1.2.2: Tree Recursion]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.14][Exercise 1.14]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.15][Exercise 1.15]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.16][Exercise 1.16]]
*** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2.3][1.2.3: Orders of Growth]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.14][Exercise 1.14]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.15][Exercise 1.15]]
*** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2.4][1.2.4: Exponentiation]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.16][Exercise 1.16]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.17][Exercise 1.17]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.18][Exercise 1.18]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.19][Exercise 1.19]]
*** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2.5][1.2.5: Greatest Common Divisors]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.20][Exercise 1.20]]
*** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2.6][1.2.6: Example: Testing for Primality]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.21][Exercise 1.21]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.22][Exercise 1.22]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.23][Exercise 1.23]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.24][Exercise 1.24]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.25][Exercise 1.25]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.26][Exercise 1.26]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.27][Exercise 1.27]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.28][Exercise 1.28]]

** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_sec_1.3][1.3: Formulating Abstractions with Higher-Order Procedures]]

*** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_sec_1.3.1][1.3.1: Procedures as Arguments]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.29][Exercise 1.29]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.30][Exercise 1.30]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.31][Exercise 1.31]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.32][Exercise 1.32]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.33][Exercise 1.33]]
*** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_sec_1.3.2][1.3.2: Constructing Procedures Using ~Lambda~]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.34][Exercise 1.34]]
*** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_sec_1.3.3][1.3.3: Procedures as General Methods]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.35][Exercise 1.35]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.36][Exercise 1.36]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.37][Exercise 1.37]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.38][Exercise 1.38]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.39][Exercise 1.39]]
*** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_sec_1.3.4][1.3.4: Procedures as Returned Values]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.40][Exercise 1.40]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.41][Exercise 1.41]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.42][Exercise 1.42]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.43][Exercise 1.43]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.44][Exercise 1.44]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.45][Exercise 1.45]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.46][Exercise 1.46]]
