#+TITLE: Structure and Interpretation of Computer Programs (SICP)
#+AUTHOR: Robert Irelan
#+EMAIL: rirelan@gmail.com
#+OPTIONS: author:t email:t f:t num:nil H:4
#+PROPERTY: header-args :comments link :noweb no-export
#+PROPERTY: header-args:scheme :shebang #!/usr/bin/env chicken-scheme
#+FILETAGS: :SICP:

* TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-9.html#%_chap_1][Chapter 1]]

** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1][1.1: Building Abstractions with Procedures]]

*** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1.1][1.1.1: Expressions]]

No exercises.

*** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1.2][1.1.2: Naming and the Environment]]

No exercises.

*** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1.3][1.1.3: Evaluating Combinations]]

No exercises.

*** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1.4][1.1.4: Compound Procedures]]

No exercises.

*** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1.5][1.1.5: The Substitution Model for Procedure Application]]

No exercises.

*** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1.6][1.1.6: Conditional Expressions and Predicates]]
**** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_thm_1.1][Exercise 1.1]]

This exercise serves purely to familiarize the student with entering statements
in the REPL. Verify the expected REPL output using tests.

#+BEGIN_SRC scheme :tangle ex-1-1-test.scm
  (use test)

  (test 10 10)

  (test 12
        (+ 5 3 4))

  (test 8
        (- 9 1))

  (test 3
        (/ 6 2))

  (test 6
        (+ (* 2 4) (- 4 6)))

  (define a 3)
  (define b (+ a 1))

  (test 19
        (+ a b (* a b)))

  (test #f
        (= a b))

  (test 4
        (if (and (> b a) (< b (* a b)))
            b
            a))

  (test 16
        (cond ((= a 4) 6)
              ((= b 4) (+ 6 7 a))
              (else 25)))

  (test 6
        (+ 2 (if (> b a) b a)))

  (test 16
        (* (cond ((> a b) a)
                 ((< a b) b)
                 (else -1))
           (+ a 1)))

#+END_SRC

**** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_thm_1.2][Exercise 1.2]]

The book's expression translated to prefix notation is

#+BEGIN_SRC scheme
  (/ (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5)))))
     (* 3 (- 6 2) (- 2 7)))
#+END_SRC

**** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_thm_1.3][Exercise 1.3]]

#+BEGIN_SRC scheme :tangle ex-1-3.scm
  (define (square x)
    (* x x))
  (define (sum-of-squares x y)
    (+ (square x) (square y)))

  ;;; Return sum of squares of two largest out of three arguments
  (define (f a b c)
    (cond
      ((and (< a b) (< a c)) (sum-of-squares b c))
      ((and (< b a) (< b c)) (sum-of-squares a c))
      (else (sum-of-squares a b))))
#+END_SRC

#+BEGIN_SRC scheme :tangle ex-1-3-test.scm
  (include "ex-1-3")
  (use test)

  (test 13 (f 1 2 3))
  (test 13 (f 2 1 3))
  (test 13 (f 3 2 1))
  (test 18 (f 3 3 2))
  (test 13 (f 3 2 2))
  (test 8 (f 2 2 2))
#+END_SRC

**** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_thm_1.4][Exercise 1.4]]

In the procedure

#+BEGIN_SRC scheme
  (define (a-plus-abs-b a b)
    ((if (> b 0) + -) a b))
#+END_SRC

evaluation does not take place when the procedure is defined, but rather
only after it is called. When it is called, evaluation proceeds from left to
right and from inside out. Thus, the forms are evaluated in the following
order:

- ~(> b 0)~
- ~(if ... + -)~
- ~((if ...) a b)~

Note that ~+~ and ~-~ are references to functions, which can in general be
returned from a function.

**** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_thm_1.5][Exercise 1.5]]

The expression under consideration is the following:

#+BEGIN_SRC scheme
  (define (p) (p))

  (define (test x y)
    (if (= x 0)
        0
        y))

  (test 0 (p))
#+END_SRC


With applicative order, a procedure is called after evaluating all its
arguments. Therefore, the last expression in the above is evaluated as follows:

- ~0 => 0~
- ~(p) => ; Calls itself recursively forever~

In normal form, all expressions are fully expanded and then reduced to
obtain a value:

- ~(test 0 (p))~
- ~(if (= 0 0) 0 (p))~
- ~0~

Because the procedure ~p~ cannot be validly evaluated by substitution (due
to infinite recursion), normal- and applicative-order evaluation give
different results here.

*** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1.7][1.1.7: Example: Square Roots by Newton's Method]]
**** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_thm_1.6][Exercise 1.6]]

When calling ~new-if~, its arguments are always evaluated. Thus, even if the
else-branch, which calls ~sqrt-iter~, should not be taken, it is nevertheless
evaluated due to strict evaluation, so calling ~sqrt-iter~ results in infinite
recursion.

**** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_thm_1.7][Exercise 1.7]]

Here is the ~good-enough?~ function defined in the text:

#+BEGIN_SRC scheme
  (define (good-enough? guess x)
    (< (abs (- (square guess) x)) 0.001))
#+END_SRC

Notably, the threshold is an absolute value, no matter the size of the
guess. For small guesses, this will terminate even if 0.001 is of a
non-negligible magnitude compared to the guess. For large guesses, if the guess
doesn't have a precision of at least 0.001 at a certain magnitude, the test may
not ever terminate because there may be no value of ~(square guess)~ that lies
within 0.001 of x, due to limited precision.

It is almost always better to define a threshold that is a multiple of the
order of magnitude of x:

#+BEGIN_SRC scheme
  (define (good-enough? guess x)
    (< (abs (/ (- (square guess) x)
               (square guess)))
       0.001))
#+END_SRC

**** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_thm_1.8][Exercise 1.8]]

Implement a cube root approximation formula based on Newton's method:

#+BEGIN_SRC scheme :tangle ex-1-8.scm
  (define (square x)
    (* x x))
  (define (cube x)
    (* x x x))

  (define (improve guess x)
    (/ (+ (/ x (square guess))
          (* 2 guess))
       3))
  (define (good-enough? guess x)
    (< (abs (/ (- (cube guess) x)
               (cube guess)))
       0.001))

  (define (cbrt-iter guess x)
    (if (good-enough? guess x)
        guess
        (cbrt-iter (improve guess x)
                   x)))
  (define (cbrt x)
    (cbrt-iter 1.0 x))
#+END_SRC

#+BEGIN_SRC scheme :tangle ex-1-8-test.scm
  (include "ex-1-8")
  (use test)

  (parameterize ((current-test-epsilon 0.01))
    (test 3.00 (cbrt 27))
    (test 6.52 (cbrt 278)))
#+END_SRC

*** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1.8][1.1.8: Procedures as Black-Box Abstractions]]

No exercises.

** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2][1.2: Procedures and the Processes They Generate]]

*** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2.1][1.2.1: Linear Recursion and Iteration]]
**** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.9][Exercise 1.9]]

Evaluate the following procedures using the substitution model:

- ~new+-rec~

  #+CAPTION: ex-1-9-rec
  #+NAME: ex-1-9-rec
  #+BEGIN_SRC scheme
    (define (new+-rec a b)
      (if (= a 0)
        b
        (inc (new+-rec (dec a) b))))
  #+END_SRC

  This procedure is fundamentally recursive because it defers the evaluation of
  ~inc~ until ~new+-rec~ has reached its base case, resulting in a stack of
  deferred operations:

  #+CAPTION: ex-1-9-rec-test
  #+NAME: ex-1-9-rec-test
  #+BEGIN_SRC scheme
    (test-chain "ex-1-9-rec"
                '((new+-rec 4 5)
                  (inc (new+-rec 3 5))
                  (inc (inc (new+-rec 2 5)))
                  (inc (inc (inc (new+-rec 1 5))))
                  (inc (inc (inc (inc (new+-rec 0 5)))))
                  (inc (inc (inc (inc 5))))
                  (inc (inc (inc 6)))
                  (inc (inc 7))
                  (inc 8)
                  9))
  #+END_SRC

- ~new+-iter~

  #+CAPTION: ex-1-9-iter
  #+NAME: ex-1-9-iter
  #+BEGIN_SRC scheme
    (define (new+-iter a b)
      (if (= a 0)
          b
          (new+-iter (dec a) (inc b))))
  #+END_SRC

  This procedure is fundamentally iterative because ~new+-iter~ is in a
  tail-call position. Because of this, each call to ~new+-iter~ can be replaced
  with its result:

  #+CAPTION: ex-1-9-iter-test
  #+NAME: ex-1-9-iter-test
  #+BEGIN_SRC scheme
    (test-chain "ex-1-9-iter"
                '((new+-iter 4 5)
                  (new+-iter 3 6)
                  (new+-iter 2 7)
                  (new+-iter 1 8)
                  (new+-iter 0 9)
                  9))
  #+END_SRC

***** Auxiliary procedures

#+BEGIN_SRC scheme :tangle ex-1-9.scm
  (define (inc x) (+ x 1))
  (define (dec x) (- x 1))

  <<ex-1-9-rec>>
  <<ex-1-9-iter>>
#+END_SRC

#+BEGIN_SRC scheme :tangle ex-1-9-test.scm
  (include "ex-1-9")
  (use test)
  (use srfi-1)

  ;;; TEST-CHAIN -- assert that all expressions in a list evaluate to the same
  ;;; result.
  (define (test-chain name exprs)
    (eval (append `(test-group ,name)
                  (unfold (lambda (p) (null? (cdr p)))
                          (lambda (p) `(test-assert (= ,(car p) ,(cadr p))))
                          cdr
                          exprs))))

  (test-group "ex-1-9-test"
              <<ex-1-9-rec-test>>
              <<ex-1-9-iter-test>>
              )

#+END_SRC

**** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.10][Exercise 1.10]]

Ackermann's function is defined below:

#+BEGIN_SRC scheme :tangle ex-1-10.scm
  (define (A x y)
    (cond ((= y 0) 0)
          ((= x 0) (* 2 y))
          ((= y 1) 2)
          (else (A (- x 1)
                   (A x (- y 1))))))
#+END_SRC

#+BEGIN_SRC scheme :tangle ex-1-10-test.scm
  (test-group "ex-1-10"
          (test 1024 (A 1 10))
          (test 65536 (A 2 4))
          (test 65536 (A 3 3)))
#+END_SRC

Here are some other functions defined (mostly) in terms of the Ackermann
function, along with more concise definitions of what they compute:

#+BEGIN_SRC scheme
  ;;; (* 2 n)
  (define (f n) (A 0 n))

  ;;; (expt 2 n)
  (define (g n) (A 1 n))

  ;;; => (expt 2 (A 2 (- n 1)))
  ;;; => (expt 2 (expt 2 (A 2 (- n 2))))
  ;;; => (expt 2 (expt 2 ( .. n calls to expt .. )))
  ;;; => (define (h n)
  ;;;      (define (h-iter i res)
  ;;;        (if (= i 0)
  ;;;          res
  ;;;          (h-iter (- i 1) (expt 2 res))))
  ;;;      (h-iter n 1))
  (define (h n) (A 2 n))

  ;;; (* 5 (* n n))
  (define (k n) (* 5 n n))
#+END_SRC

*** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2.2][1.2.2: Tree Recursion]]
**** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.11][Exercise 1.11]]

Recursive:

#+BEGIN_SRC scheme
  (define (f n)
    (if (< n 3)
      n
      (+ (f (- n 1))
         (* 2 (f (- n 2)))
         (* 3 (f (- n 3))))))
#+END_SRC

Iterative:

#+BEGIN_SRC scheme
  (define (f n)
    (define (f-res a b c)
      (+ a (* 2 b) (* 3 c)))
    (define (f-iter m a b c)
      (cond
        ((>= m n) (f-res a b c))
        (else (f-iter (+ m 1) (f-res a b c) a b))))
    (if (< n 3)
      n
      (f-iter 3 2 1 0)))
#+END_SRC

**** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.12][Exercise 1.12]]

Pascal's triangle:

#+BEGIN_SRC scheme
  (define (choose n k)
    (cond
      ((or (< n 0) (< k 0) (> k n))
       0)
      ((or (= k 0) (= k n))
       1)
      (else (+ (choose (- n 1) (- k 1))
               (choose (- n 1) k)))))
#+END_SRC

**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.13][Exercise 1.13]]

Prove that Fib(n) is the closest integer to \(\phi^n / \sqrt{5}\), where
\(\phi = (1 + \sqrt{5}) / 2\).

Fib(n) = Fib(n - 1) + Fib(n - 2)
Fib(n) \approx \alpha Fib(n - 1)
       \approx \alpha^2 Fib(n - 2)

\alpha Fib(n - 1) = \alpha Fib(n - 2) + \alpha Fib(n - 3) = \alpha^2 Fib(n - 2)
\alpha Fib(n - 2) + \alpha Fib(n - 3) = \alpha^2 Fib(n - 2)
\alpha + \alpha * Fib(n - 3) / Fib(n - 2) = \alpha^2
\alpha + \alpha * 1/\alpha = \alpha^2
\alpha + 1 = \alpha^2

Fib(n) = Fib(n - 1) + Fib(n - 2)
       = 2 * Fib(n - 1) + Fib(n - 3)

Fib(1) = \phi * Fib(0) + \delta = 1  => \delta = 1
Fib(2) = \phi * Fib(1) + \delta = 1  => \delta = 1 - \phi
Fib(3) = \phi * Fib(2) + \delta = 2  => \delta = 2 - \phi
Fib(4) = \phi * Fib(3) + \delta = 3  => \delta = 3 - 2 \phi

*** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2.3][1.2.3: Orders of Growth]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.14][Exercise 1.14]]

#+BEGIN_SRC scheme
  (define (count-change amount)
    (cc amount 5))
  (define (cc amount kinds-of-coins)
    (cond ((= amount 0) 1)
          ((or (< amount 0) (= kinds-of-coins 0)) 0)
          (else (+ (cc amount
                       (- kinds-of-coins 1))
                   (cc (- amount
                          (first-denomination kinds-of-coins))
                       kinds-of-coins)))))
  (define (first-denomination kinds-of-coins)
    (cond ((= kinds-of-coins 1) 1)
          ((= kinds-of-coins 2) 5)
          ((= kinds-of-coins 3) 10)
          ((= kinds-of-coins 4) 25)
          ((= kinds-of-coins 5) 50)))
#+END_SRC

#+BEGIN_SRC scheme
  (count-change 11)
  (cc 11 5)
  (+ (cc 11 4)
     (cc -39 5))
  (+ (+ (cc 11 3)
        (cc -14 4))
     (cc -39 5))
  (+ (+ (+ (cc 11 2)
           (cc 1 3))
        (cc -14 4))
     (cc -39 5))
  (+ (+ (+ (+ (cc 11 1)
              (cc 6 2))
           (cc 1 3))
        (cc -14 4))
     (cc -39 5))
  (+ (+ (+ (+ (+ (cc 11 0)
                 (cc 10 1))
              (cc 6 2))
           (cc 1 3))
        (cc -14 4))
     (cc -39 5))
  (+ (+ (+ (+ (+ 0
                 (+ (cc 10 0)
                    (cc 9 1)))
              (cc 6 2))
           (cc 1 3))
        (cc -14 4))
     (cc -39 5))
  (+ (+ (+ (+ (+ 0
                 (+ 0
                    (+ (cc 9 0)
                       (cc 8 1))))
              (cc 6 2))
           (cc 1 3))
        (cc -14 4))
     (cc -39 5))
#+END_SRC

**** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.15][Exercise 1.15]]

- a. ~p~ is called once for every reduction of the argument to ~sin~. Since the
  argument to ~sin~ is divided by 3 each time until reaching 0.1, we have
  \(12.15 \times 3^{-n} \leq 0.1\), giving \(n \geq 4.37\), or 5 calls to ~p~.


- b. Since sine is not in a tail-call position when being called within its
  definition, the order of space growth is directly proportional to the
  number of steps to compute the sine, which is
  \(\lceil \log_3{a / 0.1} \rceil\).

*** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2.4][1.2.4: Exponentiation]]
**** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.16][Exercise 1.16]]

#+BEGIN_SRC scheme
(define (expt-int b n)
  (define (expt-iter a b n)
    (cond
      ((= n 0) a)
      ((= n 1) (* a b))
      ((even? n)
       (expt-iter a
                  (* b b)
                  (/ n 2)))
      (else
        (expt-iter (* a b)
                   (* b b)
                   (/ (- n 1) 2)))))
  (expt-iter 1 b n))
#+END_SRC

**** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.17][Exercise 1.17]]

#+BEGIN_SRC scheme
(define (double n) (* n 2))
(define (halve n) (/ n 2))
(define (fast-* a b)
  (cond
    ((= b 0) 0)
    ((= b 1) a)
    ((even? b)
     (double (fast-* a (halve b))))
    (else
      (+ a
         (double (fast-* a (halve (- b 1))))))))
#+END_SRC

**** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.18][Exercise 1.18]]

#+BEGIN_SRC scheme
  (define (double n) (* n 2))
  (define (halve n) (/ n 2))
  (define (*-int a b)
    (define (iter c a b)
      (cond
       ((= b 0) 0)
       ((= b 1) (+ c a))
       ((even? b)
        (iter c (double a) (halve b)))
       (else
        (iter (+ c a) (double a) (halve (- b 1))))))
    (iter 0 a b))
#+END_SRC

**** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.19][Exercise 1.19]]

#+BEGIN_SRC scheme
  (define (fib n)
    (fib-iter 1 0 0 1 n))
  (define (fib-iter a b p q count)
    (cond ((= count 0) b)
          ((even? count)
           (fib-iter a
                     b
                     (+ (* p p)     ; compute p'
                        (* q q))
                     (+ (* q q)     ; compute q'
                        (* 2 p q))
                     (/ count 2)))
          (else (fib-iter (+ (* b q) (* a q) (* a p))
                          (+ (* b p) (* a q))
                          p
                          q
                          (- count 1)))))
#+END_SRC

*** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2.5][1.2.5: Greatest Common Divisors]]
**** DONE [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.20][Exercise 1.20]]

Number of remainder operations performed with applicative vs. normal order
evaluation in ~(gcd 206 40)~, and in general?

#+BEGIN_SRC scheme
  (define (gcd a b)
    (if (= b 0)
        a
        (gcd b (remainder a b))))
#+END_SRC

In the applicative-order evaluation, a remainder is taken for each iteration
of ~gcd~,

\[
d(#rem) / d(#iter) = 1
\]

Since \(#iter \prop log(a)\), the number of remainders taken is
\(\Theta(log(a))\).

In the normal-order evaluation, each expansion of ~gcd~ produces a number of
calls to remainder that is a constant multiple of the calls to remainder in the
previous iteration.

\[
  d(#rem) / d(#iter) = k #rem
\]

Thus, \(#rem \prop e^{#iter}\), and therefore \(#rem = \Theta(a)\).

The normal-order evaluation expansion looks like this:

#+BEGIN_SRC scheme
  (gcd 206 40)
  (if (= 40 0)
    206
    (gcd 40 (remainder 206 40)))
  (if (= 40 0)
    206
    (if (= (remainder 206 40) 0)
      40
      (gcd (remainder 206 40)
           (remainder 40 (remainder 206 40)))))
  (if (= 40 0)
    206
    (if (= (remainder 206 40) 0)
      40
      (if (= (remainder 40 (remainder 206 40)) 0)
          (remainder 206 40)
          (gcd (remainder 40 (remainder 206 40))
               (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))))))
#+END_SRC

*** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2.6][1.2.6: Example: Testing for Primality]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.21][Exercise 1.21]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.22][Exercise 1.22]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.23][Exercise 1.23]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.24][Exercise 1.24]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.25][Exercise 1.25]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.26][Exercise 1.26]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.27][Exercise 1.27]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.28][Exercise 1.28]]

** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_sec_1.3][1.3: Formulating Abstractions with Higher-Order Procedures]]

*** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_sec_1.3.1][1.3.1: Procedures as Arguments]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.29][Exercise 1.29]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.30][Exercise 1.30]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.31][Exercise 1.31]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.32][Exercise 1.32]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.33][Exercise 1.33]]
*** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_sec_1.3.2][1.3.2: Constructing Procedures Using ~Lambda~]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.34][Exercise 1.34]]
*** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_sec_1.3.3][1.3.3: Procedures as General Methods]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.35][Exercise 1.35]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.36][Exercise 1.36]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.37][Exercise 1.37]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.38][Exercise 1.38]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.39][Exercise 1.39]]
*** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_sec_1.3.4][1.3.4: Procedures as Returned Values]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.40][Exercise 1.40]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.41][Exercise 1.41]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.42][Exercise 1.42]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.43][Exercise 1.43]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.44][Exercise 1.44]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.45][Exercise 1.45]]
**** TODO [[http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.46][Exercise 1.46]]
